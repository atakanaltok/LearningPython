### CREATING LISTS

letters = ["a", "b", "c"]     
matrix = [[0, 1], [1, 2]]
zeros = [0] * 5
numbers = list(range(20))
asteix = [*range(4)]         = list(range(4)) === [0, 1, 2, 3]




### ACCESSING VALUES IN LISTS

k=True

omega = [44-22, k, "k","22*2", 22*2]     # [22, True, ‘k’, ‘22*2’, 44]


omega [:]        # Identity  ===    [22, True, ‘k’, ‘22*2’, 44]
omega [:: 1]     # Identity  ===    [22, True, ‘k’, ‘22*2’, 44]

# We use identities for equating lists with different id’s

a = list(range(4)

b = a
b[0] = 10
# Both a and b will turn into [10, 1, 2, 3]

b = a[:]
b[0] = 10
# Only b changes to [10, 1, 2, 3]


# You can use these too to only change b
b = list(a)
b = a.copy()






### REVERSING A LIST

omega [::-1]                 ===    [44, '22*2', 'k', True, 22]
list(reversed(omega))        ===    [44, '22*2', 'k', True, 22]
[*reversed(omega)]           ===    [44, '22*2', 'k', True, 22]


omega [::-2]                 ===    [44, 'k', 21]                   




### 

omega [::2]                  ===    [22, "k", 44]         === omega [-len(omega)::2]






### SLICING LISTS

[<int1>:<int2>:<int3>]

<int3> positive ==> Counted from left to right (DEFAULT)
<int3> negative ==> Counted from right to left



# If <int3> positive, <int1> is smaller than <int2>

# [22, True, ‘k’, ‘22*2’, 44]
omega [:2]                   ===    [22, True]                      0 < 2
omega [2:4]                  ===    ['k', '22*2']                   2 < 4
omega [1:13]                 ===    [True, 'k', '22*2', 44]         1 < 13
omega [-5:-2]                ===    [22, True, 'k']                -5 < -2
omega [-3::2]                ===    ["k", 44]                      -3 < len(omega)
omega [-32::2]               ===    [21, 'k', 99]                 -32 < len(omega)






# If <int3> negative, <int1> is bigger than <int2>

# [22, True, ‘k’, ‘22*2’, 44]
omega [4::-1]                ===    [44, '22*2', 'k', True, 21]      4 > len(omega)
omega [:-100:-1]             ===    [44, '22*2', 'k', True, 21]     -1 > -100
omega [-2:-4:-1]             ===    ['22*2', 'k']                   -2 > -4






### CHANGING PORTIONS IN LIST

omega[:2] = [11,101]      # Changes firs two

omega[:2] = []            # Delets first two
omega[:]  = []            # Deletes list

omega.clear()             # Deletes list






### Commands that are out of the rage will give blank

omega[7:] 
omega[7:13] 
omega[:13]

omega[2:-4] 
omega[::-1]






### REMOVING ITEMS

letters.pop()
letters.pop(0)
letters.remove("b")
del letters[0:3]






# Finding items 
if "f" in letters: 
    letters.index("f")
 
 




# Map and filter 
prices = list(map(lambda item: item[1], items))
expensive_items = list(filter(lambda item: item[1] >= 10, items))
 
# List comprehensions 
prices = [item[1] for item in items]
expensive_items = [item for item in items if item[1] >= 10]
 
# Zip function 
list1 = [1, 2, 3]
list2 = [10, 20, 30]
combined = list(zip(list1, list2))    # [(1, 10), (2, 20)]















### LISTS IN LISTS


alpha = [  [2,4,6,8], 101, "a word", ["nested", 1008, 234]  ]

a= [[“Hi”, “Hello”]]

a[0:1]                  === [[“Hi”, “Hello”]]     = a[0] but in a list
a[0:1] [0]              === [“Hi”, “Hello”]       = a[0] but pure
a[0:1] [0] [1]          === “Hello”               = a[0][1]
a[0:1] [0] [1] [1]      === e                     = a[0][1][1]




=====>  Iterating lists for N times where N is the len() of the lists inside the fundamental list


range_lists = [list(range(2)), list(range(4)), list(range(3))]

print(range_lists)
print("")

a = [(indexes, ranges) for ranges in range_lists for indexes in ranges]
b = [indexes for ranges in range_lists for indexes in ranges]
c = [ranges for ranges in range_lists for indexes in ranges]

print(a)
print("")
print(b)
print(f"\n{c}")








============> SOTRING


=========> Sorting with .sort

# This will sort THE MAIN LIST

friends = ["Mulan", "Dragon", "Mushu", "Chickens"]
friends.sort()          === ["Chickens", "Dragon", "Mulan", "Mushu"]
print(friends)          === ["Chickens", "Dragon", "Mulan", "Mushu"]



# Custom sorting 

items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 11)
]
 
items.sort(key=lambda item: item[1])



# Sorting and then reversing a list

friends.sort(reverse=True)
print(friends)              ===    ['Mushu', 'Mulan', 'Dragon', 'Chickens']



=========> Sorting with .sorted

This will create an identical list and will sort that list, the ORIGINAL list WILL NOT CHANGE

a_copy = sorted(friends)          

print(a_copy)               === ["Chickens", "Dragon", "Mulan", "Mushu"]
print(sorted(friends))      === ["Chickens", "Dragon", "Mulan", "Mushu"]
print(friends)              === ["Mulan", "Dragon", "Mushu", "Chickens"]












# None of append, extend, insert command return anything
# They just update the list

# If you want to assigne a variable to that updated list:

lista = list(range(3))
bar = lista[:]
bar.insert(0, 5)
print(bar)              === [5, 0, 1, 2]



============> ADDITION

beta  = list(range(5))                  ===       [0, 1, 2, 3, 4]
tetha = list(range(10,16))              ===       [10, 11, 12, 13, 14, 15]

beta += ["write anything"]              ===       [0, 1, 2, 3, 4, 'write anything']
beta += [100, "fun", 100]               ===       [0, 1, 2, 3, 4, 'write anything', 100, 'fun', 100]

beta += tetha                           ===       [0, 1, 2, 3, 4, 'write anything', 100, 'fun', 100, 10, 11, 12, 13, 14, 15]
# Just as in extend





=========> Adition with .extend


# It extends; therefore, it takes list, tuple, string

meta = list(range(3))
meta.extend([4, 5, 6])                  ===       [1, 2, 3, 4, 5, 6]
meta.extend(tetha)                      ===       [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]
meta.extend("smart")                    ===       [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, "s", "m", "a", "r", "t"]



meta = list(range(3))

meta.extend([50])         === meta.extend(50)            === [1, 2, 3, 50]
meta.extend(["smart"])    === meta.extend("smart")       === [1, 2, 3, "smart"]





=========> Addition with .append

It nests, therefore, it can take any thing (list, dic)

meta.append([4, 5, 6])    ===       [1, 2, 3, [4, 5, 6]]




meta.insert





# Looping over lists 
for letter in list: 
    ... 
 
for index, letter in enumerate(list): 
    ... 
















