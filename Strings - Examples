#  https://www.hackerrank.com/challenges/alphabet-rangoli/problem?h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen

# My solution:
def print_rangoli(size):
    alp = "abcdefghijklmnopqrstuvwxyz"

    width1 = (size - 1) * 4 + 1  # The width of the rangoli
    width2 = ((width1 + 1) // 2) - 1  # The width from beginning to the middle of the rangoli

    pattern1 = []
    alp_pattern1 = ""

    # To create the middle part of the rangoli
    for i in range(size - 1, -1, -1):
        alp_pattern1 += alp[i]

    alp_pattern1 += alp_pattern1[-2:(-size) - 1:-1]
    alp_pattern2 = "-".join(alp_pattern1)

    # Creating the down part of the rangoli
    for i in range(size):
        # To append the parts in the list that is created at the beginning, pattern1:
        pattern1.append(alp_pattern2)

        # To extract letters for the next iteration:
        alp_pattern2 = alp_pattern2.replace(alp_pattern2[slice(width2, width2 + 4)], "")

        # To add dashes at the both sides to maintain the width:
        alp_pattern2 = alp_pattern2.center(width1, "-")

    # To merge all the parts of the rangoli
    pattern2 = "\n".join(pattern1[::-1] + pattern1[1:])

    print(pattern2)

    return 




# Some other solutions 

def print_rangoli(size):
    alp = "abcdefghijklmnopqrstuvwxyz"[0:size]

    for i in range(size - 1, -size, -1):
        x = abs(i)
        line = alp[size:x:-1] + alp[x:size]
        print("--" * x + "-".join(line) + "--" * x)




def print_rangoli(size):
    alp = "abcdefghijklmnopqrstuvwxyz"
    for i in range(size - 1, -size, -1):
        temp = '-'.join(alp[size - 1:abs(i):-1] + alp[abs(i):size])
        print(temp.center(4 * size - 3, '-'))

    return




def print_rangoli(n):
    topleft = [''.join([chr(ord('a') + n - i - 1) + '-' for i in range(x)])[:-1].rjust(n * 2 - 1, '-') for x in
               range(1, n + 1)]
    topright = [line[::-1] for line in topleft]

    top = [topleft[i] + topright[i][1:] for i in range(len(topleft))]
    bottom = list(reversed(top[:-1]))

    rangoli = '\n'.join(top) + '\n' + '\n'.join(bottom)

    print(rangoli)

    return




def print_rangoli(N):
    # letters a...Nth letter of alphabet
    letters = [chr(65 + N - i).lower() for i in range(1, N + 1)]
    
    # upper half
    for i in range(1, N):
        letters_on_line = letters[:i]
        # 4N-3 is width of box
        print(('-'.join(letters_on_line[:-1] + letters_on_line[::-1])).center(4 * N - 3, '-'))
    
    # middle
    print('-'.join(letters[:-1] + letters[::-1]))
    
    # lower half
    for i in range(N - 1, 0, -1):
        letters_on_line = letters[:i]
        # 4N-3 is width of box
        print(('-'.join(letters_on_line[:-1] + letters_on_line[::-1])).center(4 * N - 3, '-'))










# https://www.hackerrank.com/challenges/the-minion-game/problem?h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen


# My solution:

def minion_game(string):
    substring_dict = {}
    vowel_list = []

    for i in range(len(string)):
        for j in range(len(string)):
            substring_dict[string[i:j + 1]] = 0

    for i in range(len(string)):
        for j in range(len(string)):
            substring_dict[string[i:j + 1]] += 1

    del substring_dict[""]

    substring_dict2 = substring_dict.copy()

    for i in "AEIOU":
        for j in substring_dict.keys():
            if i == j[0]:
                vowel_list.append(substring_dict2.pop(j))

    vowel_values = sum(vowel_list)
    consonant_values = sum(substring_dict2.values())

    if vowel_values < consonant_values:
        print(f"Stuart {consonant_values}")

    elif vowel_values > consonant_values:
        print(f"Kevin {vowel_values}")

    else:
        print("Draw")

    return




# Some other solutions 
"""
The trick to this challenge is to realize that there are n+(n-1)+(n-2)+...+2+1=n(n+1)/2 substrings in a word of length n
Therefore, since any substring starts exclusively with either a vowel or a consonant, we only need to count the number 
of substrings starting with a vowel and subtract from the total number of substrings to get the number of substrings 
starting with a consonant, or vice versa
"""


def minion_game(string):
    vowels = 'AEIOU'

    kevsc = 0
    stusc = 0
    for i in range(len(string)):
        if string[i] in vowels:
            kevsc += (len(string) - i)
        else:
            stusc += (len(string) - i)

    if kevsc > stusc:
        print("Kevin", kevsc)
    elif kevsc < stusc:
        print("Stuart", stusc)
    else:
        print("Draw")




def minion_game(string):
 
    vowels = ["A", "E", "I", "O", "U"]

    def isVowel(char):
        return char in vowels

    def isConsonant(char):
        return char not in vowels

    def numSubstr(n):
        return int(n*(n+1)/2)

    score = 0
    num = numSubstr(len(string))

    for i in range(len(string)):
        if (isVowel(string[i])):
            score += len(string) - i

    if (score > num / 2):
        print("Kevin " + str(score))
    elif (score < num / 2):
        print("Stuart " + str(num - score))
    else:
        print("Draw")






# https://www.hackerrank.com/challenges/merge-the-tools/problem?h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen

def merge_the_tools(string, k):
    while string:
        s = string[0:k]
        seen = ''

        for i in s:
            if i not in seen:
                seen += i
        print(seen)
        string = string[k:]




s = input()
k = int(input())
n = len(s)

for i in range(0, n, k):
    print(''.join(sorted(set(s[i:i + k]), key=lambda x: s[i:i + k].index(x))))




def merge_the_tools(s, k):
    for item in zip(*[iter(s)] * k):
        list1 = []  
        for item1 in item:
            if item1 not in list1:
                list1.append(item1)
        print(*list1, sep='')




def merge_the_tools(string, k):
    t = ""
    for i in range(len(string)):
        if not (string[i] in t):
            t += string[i]

        if ((i + 1) % k) == 0:
            print(t)
            t = ""





# Crazy keyboards
args = "Atakana hayat güzel"
print(("{}_" * len(args)).format(*args))
# A_t_a_k_a_n_a_ _h_a_y_a_t_ _g_ü_z_e_l_




