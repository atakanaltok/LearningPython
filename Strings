"""
alphanumeric (a-z, A-Z and 0-9)
alphabetical (a-z and A-Z)

"""


Immutable

# Assigning value

string = "abracadabra"
l = list(string)

l[5] = "k"
string = "".join(l)

print(string)   # abrackdabra



string = string[:5] + "k" + string[6:]

print(string)     # abrackdabra













greet = "Hello X"

greet.lower()

print(greet.lower())    # hello x
print(greet)            # Hello x








# String Addition
“men” + “ken”

“men” * 3 	# “menmenmen”
[men] * 3 	# ['men', 'men', 'men']


x = varlık
“ar” in x would give us True
if “var” in x:
	print(ç)


A < B < C … Z < a < b < c … z




s = "Finding the indexes of occurrences of a substring in a string"
ss = "st"

for i in range(len(s) - len(ss) + 1):  
    
    # "len(s) - len(ss) + 1” is very beneficial when the "ss" is very long since it won't iterate the last indexes 
    # But the "len(s)" can be also used instead (for short "ss"s)
    
    if s[i:(i + len(ss))] == ss:
        print(i)



# Obtaining the number of times that a substring occurs in a given string

def count_substring(string, substring):

    count = 0
    
    for i in range(len(string)):
        if string[i:].startswith(substring):
            count += 1
    
    return count

    # return sum([1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring]))
    # return [string[i:i + len(substring)] for i in range(len(string))].count(substring)








def wrap(string, max_width):
    a = ""
    b = len(string) // int(max_width)

    for i in range(b + 1):
        a = a + string[max_width * i: max_width * (i + 1)] + "\n"

    return a.removesuffix("\n")



def wrap(string, max_width):
    return "\n".join([string[i:i + max_width] for i in range(0, len(string), max_width)]) 



def wrap(string, max_width):
    for i in range(0, len(string) + 1, max_width):
        result = string[i:max_width + i]
	
        if len(result) == max_width:
            print(result)
        else:
            return (result)



def wrap(string, max_width):
    for i in range(0, len(string) + 1, max_width):
    	print(string[i:max_width + i])



# print(wrap("ABCDEFGHIJKLIMNOQRSTUVWXYZ", 4))
# print(wrap("bscnksbcjscksbcjksbckjdscsbdcbsdkjbcsdjcbsdjkcbsdkjbckjdsbjksd", 9))

https://www.hackerrank.com/challenges/text-wrap/problem?h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen





### <str>.center(<int>, <str>)

N, M = map(int, input().split())
pattern = ".|."

for i in range(1, N + 1):

    rows = (N + 1) / 2

    if i < rows:
        print(pattern.center(M, "-"))
        pattern += ".|..|."

    elif i == rows:

        a = "WELCOME"

        print(a.center(M, "-"))
        pattern = pattern[3:-3]

    else:
        print(pattern.center(M, "-"))
        pattern = pattern[3:-3]




"""

Input:
7 21

Output:
---------.|.---------
------.|..|..|.------
---.|..|..|..|..|.---
-------WELCOME-------
---.|..|..|..|..|.---
------.|..|..|.------
---------.|.---------

"""


N, M = map(int, input().split())
pattern = [(".|." * (2 * i + 1)).center(M, "-") for i in range(N // 2)]		# ['---------.|.---------', '------.|..|..|.------', '---.|..|..|..|..|.---']
print("\n".join(pattern + ['WELCOME'.center(M, "-")] + pattern[::-1]))



