"""
alphanumeric (a-z, A-Z and 0-9)
alphabetical (a-z and A-Z)



A < B < C … Z < a < b < c … z

"""


Immutable

# Assigning value

string = "abracadabra"
l = list(string)

l[5] = "k"
string = "".join(l)

print(string)   # abrackdabra



string = string[:5] + "k" + string[6:]

print(string)     # abrackdabra










# The built-in string functions don’t modify the originial string and return a new, altered string

greet = "Hello X"
greet.lower()	

print(greet.lower())    # hello x
print(greet)            # Hello x









data = "From atakanaltok@gmail.com"
at = data.find("@")
ending = data.find(".")
extention = data[at + 1:ending]

print(extention)
# gmail







# String Addition
"men" + "ken"

"men" * 3 	# "menmenmen"
[men] * 3 	# ['men', 'men', 'men']


x = arragement
if “ra” in x:
	print("x has the letters ra")




# find() function but for all occurrences
# You can also add "count" to obtain the number of occurrences

s = "Finding the indexes of all occurrences of a substring in a string"
ss = "st"
count = 0

for i in range(len(s) - len(ss) + 1):  
    
    # "len(s) - len(ss) + 1" might be beneficial when the "ss" is a long strings
    # "len(s)" can be also used instead 
    
    if s[i:(i + len(ss))] == ss:
        print(i)
	count += 1

print(count) 



# As a function:

def find_substring(string, substring):
    
	# Some codes of a crazy 1-liners of HackerRank:
	# return sum([1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring]))
	# return [string[i:i + len(substring)] for i in range(len(string))].count(substring)
	
	
	count = 0
    	
	for i in range(len(string)):
        if string[i:].startswith(substring):
			print(i)
            count += 1
    
    return count







