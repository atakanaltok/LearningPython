"""
alphanumeric (a-z, A-Z and 0-9)
alphabetical (a-z and A-Z)



A < B < C … Z < a < b < c … z

"""


# Escape Sequences are counted as 1-line 

print(len("X\nY")) 		# 3
print(len("a \n b \n c"))	# 9



# sep=""

print("honey" + "bee", "bee", "beehive", sep="_")           # honeybee_bee_beehive
print("honey", "bee", "beehive", sep="_" + "OoO" + "_")     # honey_OoO_bee_OoO_beehive





# Immutable ==> Mutable + Changing ==> Immutable


string = "abracadabra"
l = list(string)
l[5] = "k "
string = "".join(l)

print(string)   # abrack dabra


## An example

def present_participle_generator(s):
    s = str(s)
    s_list = list(s)

    if s.endswith("ie"):
        s_list[-2:] = 'ying'

    elif s.endswith("e"):
        s_list[-1] = "ing"

    else:
        s_list.append("ing")

    suffix = "".join(s_list)
    return suffix


while True:
    print(present_participle_generator(input("Enter: ")))




# Another way

string = string[:5] + "k " + string[6:]

print(string)	# abrackdabra







# Getting a string from specific interval

data = "From atakanaltok@gmail.com"
at = data.find("@")
ending = data.find(".")
extention = data[at + 1:ending]

print(extention)	# gmail





# find() function but for all occurrences
# You can also add "count" to obtain the number of occurrences

s = "Finding the indexes of all occurrences of a substring in a string"
ss = "st"
count = 0

for i in range(len(s) - len(ss) + 1):  
    
    # "len(s) - len(ss) + 1" might be beneficial when the "ss" is a long strings
    # "len(s)" can be also used instead 
    
    if s[i:(i + len(ss))] == ss:
        print(i)
	count += 1

print(count) 



# As a function:

def find_substring(string, substring):
    
	# Some codes of a crazy 1-liners of HackerRank:
	# return sum([1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring]))
	# return [string[i:i + len(substring)] for i in range(len(string))].count(substring)
	
	
	count = 0
    	
	for i in range(len(string)):
        if string[i:].startswith(substring):
			print(i)
            count += 1
    
    return count







